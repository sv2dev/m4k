name: Build Push

on:
  push:
    branches:
      - main
env:
  IMAGE_NAME: media-optimizer
jobs:
  check-version:
    name: Check if version changed
    runs-on: ubuntu-latest
    outputs:
      core-changed: ${{ steps.check.outputs.core-changed }}
      server-changed: ${{ steps.check.outputs.server-changed }}
      client-changed: ${{ steps.check.outputs.client-changed }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: Check if package.json version changed
        id: check
        shell: bash
        run: |
          function get_version() {
            local package_path=$1
            if [ -f "$package_path" ]; then
              jq -r .version "$package_path" || echo "0.0.0"
            else
              echo "0.0.0"
            fi
          }

          CURRENT_CORE_VERSION=$(get_version "packages/core/package.json")
          CURRENT_SERVER_VERSION=$(get_version "packages/server/package.json")
          CURRENT_CLIENT_VERSION=$(get_version "packages/client/package.json")
          git checkout HEAD^
          PREVIOUS_CORE_VERSION=$(get_version "packages/core/package.json")
          PREVIOUS_SERVER_VERSION=$(get_version "packages/server/package.json")
          PREVIOUS_CLIENT_VERSION=$(get_version "packages/client/package.json")

          core_changed=$([ "$CURRENT_CORE_VERSION" != "$PREVIOUS_COREVERSION" ] && echo "true" || echo "false")
          server_changed=$([ "$CURRENT_SERVER_VERSION" != "$PREVIOUS_SERVER_VERSION" ] && echo "true" || echo "false")
          client_changed=$([ "$CURRENT_CLIENT_VERSION" != "$PREVIOUS_CLIENT_VERSION" ] && echo "true" || echo "false")
          echo "core-changed=$core_changed" >> "$GITHUB_OUTPUT"
          echo "server-changed=$server_changed" >> "$GITHUB_OUTPUT"
          echo "client-changed=$client_changed" >> "$GITHUB_OUTPUT"

  publish-core:
    name: Publish core package
    needs: check-version
    if: needs.check-version.outputs.core-changed == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.4
          registry-url: "https://registry.npmjs.org/"
      - run: bun install
      - name: Publish package
        run: |
          cd 
          bun publish --no-git-checks
        working-directory: ./packages/core
        env:
          BUN_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  publish-server:
    name: Publish server package
    needs: check-version
    if: needs.check-version.outputs.server-changed == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.4
          registry-url: "https://registry.npmjs.org/"
      - run: bun install
      - name: Publish package
        run: |
          cd 
          bun publish --no-git-checks
        working-directory: ./packages/core
        env:
          BUN_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  publish-client:
    name: Publish client package
    needs: check-version
    if: needs.check-version.outputs.client-changed == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.4
          registry-url: "https://registry.npmjs.org/"
      - run: bun install
      - name: Publish package
        run: |
          cd 
          bun publish --no-git-checks
        working-directory: ./packages/core
        env:
          BUN_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  push-docker-image:
    name: Build and push docker image
    needs: check-version
    if: needs.check-version.outputs.server-changed == 'true'
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        id: builder
        uses: docker/setup-buildx-action@v1
      - name: Log in to registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Build and push image
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME
          VERSION=${{ needs.check-version.outputs.version }}
          docker buildx build --push --platform linux/arm64,linux/amd64 . --tag $IMAGE_ID:$VERSION --label "runnumber=${GITHUB_RUN_ID}"
